// Pluto.cpp : implementation file
//

#include "stdafx.h"
#include "Pluto.h"
#include "astrotime.h"
#include "astrocalc.h"
#include "convert.h"
#include <math.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

double CPluto::FQ1[83] =
{82,
0.0000645003954767,
0.0001083248054773,
0.0001302772403167,
0.0001647868659960,
0.0001935009111902,
0.0002223740247147,
0.0003032575201026,
0.0003259246239385,
0.0003564763034914,
0.0004265811293132,
0.0004503959517513,
0.0004638675148284,
0.0005009272733421,
0.0005163593863414,
0.0005578826828210,
0.0005882795362847,
0.0006450023602974,
0.0007097635821639,
0.0007630643253588,
0.0007740033551209,
0.0008385031396726,
0.0008950591609720,
0.0009545118163938,
0.0010255417569600,
0.0010826728325744,
0.0011680358909203,
0.0012405125052369,
0.0012931805883876,
0.0013460706181008,
0.0014190059530383,
0.0014394705053002,
0.0014502634075377,
0.0014992014575181,
0.0015434430430867,
0.0016000710611098,
0.0016562809940875,
0.0017275924266291,
0.0017454042542465,
0.0018215079641428,
0.0018694826929211,
0.0019274630193251,
0.0020276790928706,
0.0021822818660433,
0.0022885289854970,
0.0023167646379420,
0.0023445464874575,
0.0024069306189938,
0.0024473146628449,
0.0024778027974419,
0.0025244208011161,
0.0025682157855485,
0.0026028617439482,
0.0026544444009919,
0.0026987455959123,
0.0027308225916697,
0.0027735113723168,
0.0028728385464030,
0.0029001725379479,
0.0029379670182566,
0.0029750359447782,
0.0031326820696785,
0.0031822107498712,
0.0031931048857857,
0.0032268922327691,
0.0034657232066225,
0.0037838581645670,
0.0038055149432355,
0.0038631344783149,
0.0039129259467328,
0.0040311445462510,
0.0040607542008930,
0.0041490103414206,
0.0043500678052272,
0.0046321937641054,
0.0058000376725240,
0.0091460971544658,
0.0091560629947357,
0.0172021239411871,
0.0182919855069063,
0.0279624510118796,
0.0344040996177640,
0.0714245719830324};

double CPluto::FQ2[20] =
{19,
0.0001083248054773,
0.0001647868659960,
0.0003032575201026,
0.0003259246239385,
0.0003564763034914,
0.0005009272733421,
0.0005882795362847,
0.0007097635821639,
0.0007630643253588,
0.0008950591609720,
0.0011680358909203,
0.0014502634075377,
0.0017454042542465,
0.0029001725379479,
0.0031822107498712,
0.0040607542008930,
0.0043500678052272,
0.0091460971544658,
0.0279624510118796};

double CPluto::FQ3[6] =
{5,
0.0001083248054773,
0.0003032575201026,
0.0011680358909203,
0.0043500678052272,
0.0279624510118796};

double CPluto::AX[5] =
{4,
98083308510.,
-1465718392.,
11528487809.,
55397965917.};

double CPluto::AY[5] =
{4,
101846243715.,
57789.,
-5487929294.,
8520205290.};

double CPluto::AZ[5] =
{4,
2183700004.,
433209785.,
-4911803413.,
-14029741184.};

double CPluto::CXSX1[83][2] =
{82,2,
-16338582222.,-308294137468.,
-5995086437.,-68820910480.,
23663880362.,28346466257.,
10304632056.,-1755658975.,
-3996936944.,7818660837.,
-4136465568.,-1098895702.,
1188702881.,-1192462299.,
-621434363.,-772129982.,
566898160.,1061702581.,
-75880391.,-639572722.,
576146406.,1128327488.,
-659684298.,-423570428.,
451962774.,-175317704.,
-153724334.,251601606.,
-603163280.,-869448807.,
364764379.,551228298.,
193062130.,87807522.,
161493959.,-11540541.,
1167349082.,-103236703.,
-1417467887.,92638954.,
15325240.,-3624991.,
-3624391.,1004975.,
-587306.,304396.,
132022.,-56532.,
-106501.,55554.,
228373.,-799096.,
-95106.,56947.,
56299.,-48016.,
-48339.,50599.,
803937.,-680660.,
-6172744.,5858452.,
-18962749.,38125648.,
133022.,-109460.,
-25964.,18684.,
7111.,-5269.,
-4998.,2771.,
32034.,-6814.,
-29666.,47130.,
-1983.,1192.,
114.,-1387.,
191.,379.,
-1063.,-612.,
419.,-52.,
346.,813.,
5059.,-4354.,
-81.,-2275.,
1408.,685.,
2964.,-1352.,
-5364.,4681.,
1509.,-1908.,
-4924.,-6530.,
2954.,8667.,
2034.,1675.,
-5199.,874.,
604.,898.,
-1247.,965.,
4576.,-7124.,
-350741.,-1145389.,
-4023.,2931.,
1147.,-618.,
-38.,-34.,
-99.,-6562.,
-11686.,8038.,
1129.,-697.,
582.,-8.,
-83.,12.,
-97.,-267.,
431.,-131.,
-134.,304.,
-323.,-756.,
-292.,-103.,
195.,-250.,
39068.,19816.,
523.,-596.,
-1747.,576.,
3135.,4122.,
-619.,65.,
-12095.,-27900.,
6.,217.,
18476.,-137.,
-130.,-269.,
-438.,531.};

double CPluto::CXSX2[20][2] =
{19,2,
102345278799.,-24338350765.,
-9329130892.,11210995713.,
1484339404.,2793567155.,
472660593.,-776019789.,
-581239444.,1528323591.,
1016663241.,-249354416.,
-1054199614.,1127608109.,
99039105.,-667692329.,
-52190030.,-1570766679.,
-3394173.,-9724425.,
-16529.,26552.,
3102430.,3332520.,
2286.,-27607.,
-10955.,-11696.,
-5293.,-7297.,
-654.,-104.,
124.,-184.,
-85.,-455.,
29.,-16.};

double CPluto::CXSX3[6][2] =
{5,2,
418209651.,39813894679.,
-1191875710.,3633087275.,
-823081.,522728.,
-558.,-320.,
-1091.,-1401.};

double CPluto::CYSY1[83][2] =
{82,2,
299584895562.,-53545027809.,
75951634908.,-8838029861.,
-36135662843.,23553788174.,
18125610071.,13775798112.,
-20398008415.,-6068121593.,
6125780503.,-2853107588.,
-162559485.,750355551.,
4352425804.,-82067770.,
-3819676998.,230091832.,
1168107376.,-259838942.,
-5041323701.,197944074.,
4093828501.,27141006.,
-1727274544.,-105334544.,
134214260.,95175918.,
5033950069.,-139461973.,
-3071449401.,80593104.,
-1190419055.,-5126842.,
-775881742.,-21953793.,
-5524713888.,-163767784.,
6803228005.,192436228.,
-65675611.,-2479113.,
15155413.,561687.,
2009509.,121909.,
-389682.,-30275.,
275571.,16333.,
474366.,68105.,
132163.,24081.,
-81550.,-11228.,
69996.,667.,
-706470.,-73047.,
4777898.,1007089.,
-44002785.,-22814549.,
-58735.,434.,
7624.,1013.,
-1922.,710.,
-729.,1100.,
-1733.,-4598.,
-35642.,1990.,
-586.,564.,
-258.,828.,
-368.,-1119.,
1286.,-1249.,
-136.,-597.,
883.,227.,
2673.,5467.,
331.,801.,
50.,-2029.,
178.,-1892.,
2901.,4713.,
-654.,-459.,
-8972.,1757.,
3034.,-9303.,
1113.,-2357.,
570.,7679.,
-72.,-2953.,
1950.,629.,
8550.,5011.,
1047593.,-333905.,
-2348.,-2388.,
313.,415.,
432.,139.,
6765.,-5726.,
-8240.,-4583.,
335.,310.,
140.,681.,
-833.,-107.,
252.,301.,
-210.,-525.,
366.,198.,
-920.,-379.,
1215.,-230.,
-217.,-64.,
-17780.,36069.,
581.,459.,
-560.,-1596.,
-4131.,2509.,
390.,-146.,
25613.,-11081.,
-206.,4.,
1850.,15764.,
171.,-147.,
-471.,-362.};

double CPluto::CYSY2[20][2] =
{19,2,
26437625772.,117449924600.,
-12674907683.,-7691661502.,
-1067899665.,-4771148239.,
-2082744.,3733883366.,
-43195632.,-7081845126.,
211912497.,3502526523.,
-108307161.,-8115570206.,
-63033809.,3607883959.,
-203850703.,7690328772.,
-1672332.,37384011.,
7136.,-164319.,
803655.,-2859257.,
-10985.,1593.,
9126.,-11997.,
3317.,-6476.,
-151.,1419.,
160.,34.,
138.,232.,
-27.,32.};

double CPluto::CYSY3[6][2] =
{5,2,
-36463065062.,2752753498.,
-5816560445.,-672124207.,
1576292.,154239.,
-21.,-400.,
-295.,372.};

double CPluto::CZSZ1[83][2] =
{82,2,
98425296138.,76159403805.,
25475793908.,17987340882.,
-18424386574.,-1193982379.,
2645968636.,4828308190.,
-5282207967.,-4248985438.,
3278235471.,-559147671.,
-425422632.,593594960.,
1526641086.,208799497.,
-1323182752.,-249913200.,
235873266.,115051024.,
-1617466723.,-282588988.,
1557465867.,135883560.,
-848586296.,23091693.,
218182986.,-49187976.,
1636044515.,223956575.,
-1001334243.,-137344299.,
-455739370.,-28188872.,
-348173978.,-2636274.,
-2511254281.,-14202661.,
3062521470.,25488216.,
-32079379.,419837.,
7597939.,-150966.,
1138566.,-64906.,
-238849.,3719.,
192377.,-2226.,
83169.,86321.,
148694.,-15970.,
-92489.,16609.,
87116.,-15782.,
-1281070.,200300.,
9950106.,-1500491.,
-25105642.,-9161491.,
-171749.,37481.,
31035.,-4616.,
-8648.,224.,
5360.,-1027.,
-30345.,5220.,
11482.,-6976.,
1322.,-267.,
-467.,556.,
96.,-23.,
894.,-711.,
-381.,-122.,
-583.,-97.,
2525.,2440.,
-569.,786.,
226.,-806.,
-2039.,-167.,
3728.,-156.,
-1540.,572.,
42.,2532.,
-3144.,-4582.,
658.,-1178.,
220.,875.,
1848.,-558.,
678.,781.,
-7289.,3230.,
463291.,-116132.,
3945.,-1440.,
-1141.,438.,
-26.,176.,
-10607.,1072.,
11458.,-5850.,
-1005.,418.,
120.,267.,
-301.,60.,
135.,134.,
-186.,-85.,
118.,-59.,
30.,112.,
197.,-168.,
-182.,-89.,
-8585.,14986.,
240.,190.,
-226.,-685.,
-2049.,1018.,
283.,-48.,
11109.,-4807.,
-100.,0.,
-842.,7066.,
71.,-54.,
-181.,-229.};

double CPluto::CZSZ2[20][2] =
{19,2,
-22591501373.,44126663549.,
-1138977908.,-5626220823.,
-782718600.,-2536450838.,
-141483824.,1536292657.,
159033355.,-2916144530.,
-246222739.,949074586.,
287284767.,-2842935040.,
-48002332.,1500396857.,
-41114335.,3415136438.,
578004.,19702076.,
-8420.,-46995.,
-766779.,-5801645.,
957.,33470.,
5780.,17674.,
4141.,7355.,
417.,199.,
-8.,11.,
65.,205.,
-22.,33.};

double CPluto::CZSZ3[6][2] =
{5,2,
-11656050047.,-11127973411.,
-1186276469.,-1310869292.,
1388681.,-164753.,
201.,-107.,
561.,284.};

/////////////////////////////////////////////////////////////////////////////
// CPluto

CPluto::CPluto()
{
}

CPluto::~CPluto()
{
}


BEGIN_MESSAGE_MAP(CPluto, CWnd)
	//{{AFX_MSG_MAP(CPluto)
		// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CPluto message handlers


void CPluto::heliocentricCartesianPluto(double julDay, double &plutoX, double &plutoY, double &plutoZ)

{
	convert Convert;
	astrotime Astrotime;
	
	double x, Fx, X1, X2, X3, X4, Y1, Y2, Y3, Y4, Z1, Z2, Z3, Z4;
	double JDE, arg;
	int i;

	i = 0;
		
	X1 = X2 = X3 = X4 = Y1 = Y2 = Y3 = Y4 = Z1 = Z2 = Z3 = Z4 = 0;

	JDE = Astrotime.calcJulianDayEphemeris(julDay);
	
	x = ((double)2 * (JDE - (double)2341972.5) / (double)146120) - (double)1;
	Fx = x * (double)73060;
	
	X1 = AX[1] + AX[2] * x + AX[3] * x * x +
		 AX[4] * x * x * x;
	
	for ( i=1; i<=FQ1[0]; i++)
	{
		arg = CXSX1[i][0] * cos(Convert.radianReduce(FQ1[i] * Fx)) +
			  CXSX1[i][1] * sin(Convert.radianReduce(FQ1[i] * Fx));
		X2 += arg;
		}
	
	for ( i=1; i<=FQ2[0]; i++)
	{
		arg = CXSX2[i][0] * cos(Convert.radianReduce(FQ2[i] * Fx)) +
			  CXSX2[i][1] * sin(Convert.radianReduce(FQ2[i] * Fx));
		X3 += arg;
		}
	
	for ( i=1; i<=FQ3[0]; i++)
	{
		arg = CXSX3[i][0] * cos(Convert.radianReduce(FQ3[i] * Fx)) +
			  CXSX3[i][1] * sin(Convert.radianReduce(FQ3[i] * Fx));
		X4 += arg;
		}

	Y1 = AY[1] + AY[2] * x + AY[3] * x * x +
		 AY[4] * x * x * x;
	
	for ( i=1; i<=FQ1[0]; i++)
	{
		arg = CYSY1[i][0] * cos(Convert.radianReduce(FQ1[i] * Fx)) +
			  CYSY1[i][1] * sin(Convert.radianReduce(FQ1[i] * Fx));
		Y2 += arg;
		}
	
	for ( i=1; i<=FQ2[0]; i++)
	{
		arg = CYSY2[i][0] * cos(Convert.radianReduce(FQ2[i] * Fx)) +
			  CYSY2[i][1] * sin(Convert.radianReduce(FQ2[i] * Fx));
		Y3 += arg;
		}
	
	for ( i=1; i<=FQ3[0]; i++)
	{
		arg = CYSY3[i][0] * cos(Convert.radianReduce(FQ3[i] * Fx)) +
			  CYSY3[i][1] * sin(Convert.radianReduce(FQ3[i] * Fx));
		Y4 += arg;
		}

	Z1 = AZ[1] + AZ[2] * x + AZ[3] * x * x +
		 AZ[4] * x * x * x;
	
	for ( i=1; i<=FQ1[0]; i++)
	{
		arg = CZSZ1[i][0] * cos(Convert.radianReduce(FQ1[i] * Fx)) +
			  CZSZ1[i][1] * sin(Convert.radianReduce(FQ1[i] * Fx));
		Z2 += arg;
		}
	
	for ( i=1; i<=FQ2[0]; i++)
	{
		arg = CZSZ2[i][0] * cos(Convert.radianReduce(FQ2[i] * Fx)) +
			  CZSZ2[i][1] * sin(Convert.radianReduce(FQ2[i] * Fx));
		Z3 += arg;
		}
	
	for ( i=1; i<=FQ3[0]; i++)
	{
		arg = CZSZ3[i][0] * cos(Convert.radianReduce(FQ3[i] * Fx)) +
			  CZSZ3[i][1] * sin(Convert.radianReduce(FQ3[i] * Fx));
		Z4 += arg;
		}

	plutoX = X1 + X2 + (X3 * x) + (X4 * x * x);
	plutoY = Y1 + Y2 + (Y3 * x) + (Y4 * x * x);
	plutoZ = Z1 + Z2 + (Z3 * x) + (Z4 * x * x);
	plutoX /= 1.E10;
	plutoY /= 1.E10;
	plutoZ /= 1.E10;
}

void CPluto::heliocentricSphericalPluto(double julDay, double &plutoL,
							  double &plutoB, double &plutoR)
{
	astrocalc Astrocalc;
	double plutoX, plutoY, plutoZ;

	CPluto::heliocentricCartesianPluto(julDay, plutoX, plutoY, plutoZ);
	Astrocalc.cartesianToSpherical(plutoX, plutoY, plutoZ, plutoL, plutoB,
							 plutoR);
}
